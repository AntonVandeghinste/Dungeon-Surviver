//------------------------------------------------------------------------------
// <auto-generated>
//     Deze code is gegenereerd met een hulpprogramma.
//     Runtime-versie:4.0.30319.34014
//
//     Als u wijzigingen aanbrengt in dit bestand, kan dit onjuist gedrag veroorzaken wanneer
//     de code wordt gegenereerd.
// </auto-generated>
//------------------------------------------------------------------------------
using System.Collections.Generic;
using System;
using UnityEngine;

public static class DungeonHelper
{

	/* This class is basically the information storage of the dungeon */

	public static int roomSize = 1;
	public static int defaultWidth = 2, defaultHeight = 2, defaultDepth = 2;
	public static int width, height, depth;//respectively x,z,y
	public static float spacing = 1.10f;
	public static Room[,,] map;
	//This is for simple coordinate wise accessibilty(coordinate 0,0,0 namely the first block will have a real coordinate of -somewhat,y,z etc...)
	public static List<Room> rooms = new List<Room>();
	//This is the actual list of rooms
	public static Room Spawn;
	public static Room Exit;
	public static int RequiredKeys = 0;
	public static List<Room> deadEnds = new List<Room> ();

	public static bool IsInMapRange (int x, int y, int z) {
		
		return x >= 0 && x < width && y >= 0 && y < depth && z >= 0 && z < height;
		
	}

	public static void CalculateRequiredKeys(){
		
		int requiredKeys = deadEnds.Count;
		
		requiredKeys += UnityEngine.Random.Range (0, DungeonHelper.rooms.Count - (2 + requiredKeys));
		requiredKeys += (int) Math.Log (GameManager.instance.level);
		
		RequiredKeys = requiredKeys;
		
	}

	public static void AssignExitRoom() {
		
		foreach (Room r in rooms) {
			
			if(r.ConnectedRooms().Count < 2  && r != Spawn){
				
				r.SetDeadEnd();
				deadEnds.Add (r);
				
			}
			
		}
		
		int exit = UnityEngine.Random.Range (0, deadEnds.Count);
		deadEnds [exit].setType (Type.EXIT);
		Exit = deadEnds [exit];
		deadEnds.Remove (Exit);
		
	}

	public static void AddGamePlay(){

		List<Room> remaining = new List<Room> ();

		foreach (Room r in rooms) {
			
			if(r != Spawn && r != Exit)
				remaining.Add (r);
			
		}

		foreach (Room r in deadEnds) {

			r.setType(Type.ENEMY.BOSS);
			remaining.Remove (r);

		}

		//remaining.ForEach(item => Debug.Log(item));

		for (int i = 0; i < RequiredKeys - deadEnds.Count; i++) {

			int index = UnityEngine.Random.Range (0, remaining.Count);
			remaining[index].setType (Type.ENEMY.BOSS);
			remaining.Remove (remaining[index]);

		}

		foreach (Room r in remaining) {

			if(UnityEngine.Random.Range (0, 2) < 1) {

				r.setType(Type.PUZZLE);

			}

		}

	}

	public static void Generate (int level, MapGenerator2 mapgen) {

		mapgen.SetupScene (level);

	}

}